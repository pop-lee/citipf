<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
	 xmlns:ChartViews="com.citipf.liyunpeng.views.chartViews.*"
	 xmlns:flexlib="com.citipf.liyunpeng.mdi.containers.*"
	 width="100%" height="100%"
	 minWidth="800" minHeight="600"
	 horizontalScrollPolicy="auto" verticalScrollPolicy="auto"
	 initialize="init()"
	 creationComplete="createComp()" xmlns:login="com.citipf.liyunpeng.views.login.*">
	<mx:Script>
		<![CDATA[
			import com.citipf.liyunpeng.valueObject.UInveVO;
			import mx.events.PropertyChangeEvent;
			import mx.binding.utils.ChangeWatcher;
			import mx.events.CloseEvent;
			import mx.events.IndexChangedEvent;
			import mx.effects.easing.Elastic;
			import mx.effects.easing.Back;
			import mx.effects.Move;
			import mx.managers.PopUpManager;
			import mx.containers.Panel;
			import com.citipf.liyunpeng.MacPopUp.controls.CocoaAlert;
			import com.citipf.liyunpeng.models.Model;
			import com.citipf.liyunpeng.mdi.SuperWindow;
			import com.citipf.liyunpeng.models.ViewModel;
			import com.citipf.liyunpeng.views.purcPlan.PurcPlanMain;
			import flash.utils.getDefinitionByName;
			
			[Bindable]
			private var viewModel : ViewModel = ViewModel.getInstance();
			
			[Bindable]
			private var model : Model = Model.getInstance();
			
			private function init() : void
			{
				viewModel.mainVBox = mainVBox;
				
				for each(var obj : Object in mainViews.views) 
				{
					try {
						var disObj : Panel = new (getDefinitionByName(obj.className)) as Panel; 
						disObj.label = obj.lable;
						trace("加载---" + obj.label + "---模块");
						mainViewStack.addChild(disObj);
					} catch ( re : ReferenceError ) {
						trace("引用模块---“" + obj.label + "”---类名未定义或定义错误" + 
								"---Reference Class name not found");
					}
				}
				
				if(ChangeWatcher.canWatch(model,"_curUser")) {
					ChangeWatcher.watch(model,"_curUser",loginedGetInfo);
				}
			}
			
			/**
			 * 双击窗口列表还原最小化窗口
			 */
			private function winDGDoubleClick_Handle() : void
			{
				if(winDG.selectedIndex == -1) return;
				(viewModel.windowList.getItemAt(winDG.selectedIndex).win as SuperWindow).unMinimize();
				viewModel.windowList.removeItemAt(winDG.selectedIndex);
			}
			
			/**
			 * 初始化效果函数
			 */
			private function createComp() : void
			{
				navButton.y = 0 - navButton.height;
				var navButtonMove : Move = new Move(navButton);
				navButtonMove.easingFunction = Back.easeOut;
				navButtonMove.stop();
				navButtonMove.yTo = 0;
				navButtonMove.play();
				
				mainViewStack.y = 0 - mainViewStack.height;
				var mainViewStackMove : Move = new Move(mainViewStack);
				mainViewStackMove.easingFunction = Back.easeOut;
				mainViewStackMove.stop();
				mainViewStackMove.yTo = 0;
				mainViewStackMove.play();
				
				CocoaAlert.paddingTop = applicationBar.height + 5;
			}
			
			/**
			 * 登录窗口控制
			 */
			private function toLogin() : void
			{
				var loginBoxMove : Move = new Move(loginBox);
					loginBoxMove.easingFunction = Back.easeOut;
					loginBoxMove.stop();
				
				if(loginBox.loginViewEnable == false) {
					loginBox.loginViewEnable = true;
					
					loginBoxMove.yTo = -5;
					loginBoxMove.play();
					
					toLoginBtn.label = "返回︿";
				} else {
					loginBoxMove.yTo = 0 - loginBox.height - 5;
					loginBoxMove.play();
					loginBox.loginViewEnable = false;
					if(model._curUser == null) {
						toLoginBtn.label = "登录﹀" ; 
					} else {
						toLoginBtn.label = "注销﹀" ;
					}
				} 
			}
			
			/**
			 * 导航所引改变时出发的方法
			 */
			private function pageIndexChange(event : IndexChangedEvent) : void
			{
				if(model._curUser == null && event.newIndex > 0) {
					mainBox.enabled = false;
					CocoaAlert.show("您暂时还没有登录，\n\n所以暂时还不能做理财规划，\n\n请先登录 ^_^", "未登录提示", 0x4, mainBox, false, notLoginAlert);
				} else if(event.newIndex > 1 && model._uInve == null) {
					mainBox.enabled = false;
					CocoaAlert.show("请先确定下您的投资偏好，\n\n若不确定我们将对您进行测试 ^_^", "未登录提示", 0x4, mainBox, false, noUInveAlert);
				}
			}
			/**
			 * 没有登录提示错误
			 */
			private function notLoginAlert(event : CloseEvent) : void 
			{ 
				toLogin();
				mainViewStack.selectedIndex = 0;
				mainBox.enabled = true;
			}
			private function noUInveAlert(event : CloseEvent) : void
			{
				mainViewStack.selectedIndex = 1;
				mainBox.enabled = true;
			}
			
			private function loginedGetInfo(event : PropertyChangeEvent) : void
			{
				if(model._curUser != null) {
					model._loginStatus = 1;
					toLogin();
					var uInve : UInveVO = new UInveVO();
					uInve.ip_infoId = model._curUser.ui_infoId;
					model.getUInveVO(uInve);
				}
			}
			
		]]>
	</mx:Script>
	<mx:Model id="mainViews" source="../configs/viewsConfig.xml" />
	
	<mx:ApplicationControlBar id="applicationBar" height="70" width="100%" >
		<mx:HBox width="100%" height="100%" >
			<mx:Label width="200" />
			<ChartViews:TitleChartView />
			<mx:VBox width="200" height="100%">
				<mx:Button id="toLoginBtn" label="登录" click="toLogin()" />
			</mx:VBox>
		</mx:HBox>
	</mx:ApplicationControlBar>
	
	<flexlib:MDICanvas id="mainVBox" width="100%" height="100%" 
		horizontalScrollPolicy="off" verticalScrollPolicy="off" >
		<mx:HBox id="mainBox" width="100%" height="100%" styleName="navButtonBox"
			x="0" y="0" >
			<mx:VBox width="{viewModel.NAV_BUTTON_WIDTH}" height="100%" >
				<mx:ToggleButtonBar id="navButton" width="85%" selectedIndex="{mainViewStack.selectedIndex}"
					 dataProvider="{mainViews.views}" labelField="label" direction="vertical" />
				<!--
				<mx:Spacer height="100%" />
				-->
				<mx:DataGrid id="winDG" width="{navButton.width}" height="100%" dataProvider="{viewModel.windowList}"
					doubleClickEnabled="true" 
					doubleClick="winDGDoubleClick_Handle()" />
			</mx:VBox>
			<mx:ViewStack id="mainViewStack" width="100%" height="100%" change="pageIndexChange(event)"
				selectedIndex="{navButton.selectedIndex}" />
		</mx:HBox>
		<login:LoginBox id="loginBox" x="{this.width - loginBox.width - 15}" y="{0 - loginBox.height - 5}"
			closeLoginView="toLogin()"/>
	</flexlib:MDICanvas>
</mx:VBox>
